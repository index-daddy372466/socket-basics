<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>chat rooms</title>
  </head>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: Arial, Helvetica, sans-serif;
      -webkit-touch-callout: none; /* iOS Safari */
      -webkit-user-select: none; /* Safari */
      -khtml-user-select: none; /* Konqueror HTML */
      -moz-user-select: none; /* Old versions of Firefox */
      -ms-user-select: none; /* Internet Explorer/Edge */
      user-select: none; /* Non-prefixed version, currently
                                      supported by Chrome, Edge, Opera and Firefox */
    }
    body {
      width: 100%;
      height: 100vh;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
    }
    #container {
      background: #333;
      height: 100vh;
      width: 100%;
    }
    #tile1,
    #tile2,
    #tile3 {
      border: 2px solid red;
      background: #fff;
      border-radius: 12px;
      cursor: pointer;
      position: Fixed;
    }

    #tile3 {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      gap: 1rem;
    }
    #tile3 > .parent {
      height: 50%;
      width: 100%;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: end;
    }
    #tile3 > form {
      height: 50%;
      width: 100%;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: start;
      gap: 1rem;
    }
    .align-li {
      text-align: center;
      cursor: crosshair;
      list-style: none;
      transition: 0.5s;
      padding: 0.5rem;
      border-radius: 12px;
    }
    .align-li:hover {
      transition: 0.25s;
      color: #fff;
      background: #000;
    }
    #form > #text-input {
      padding: 0.25rem;
      width: 75%;
      font-size: 18px;
      text-align: center;
      border-radius: 12px;
      border: none;
      outline: none;
      background: silver;
      box-shadow: inset 0 0 4px 1.5px #6f6969;
    }
    #form > button {
      height: 50px;
      width: 50px;
      border-radius: 12px;
      background: purple;
      color: #fff;
      font-size: 25px;
      font-weight: bold;
      border: none;
      cursor: pointer;
      transition: 0.5s;
      filter: drop-shadow(1px 3px 1.5px rgb(0, 0, 0));
      -webkit-filter: drop-shadow(1px 3px 1.5px rgb(0, 0, 0));
      -webkit-filter: drop-shadow(1px 3px 1.5px rgb(0, 0, 0));
      outline: none;
    }
    #intake {
      width: 100%;
      height: 100%;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
    }
    #form > button:hover {
      filter: none;
      height: 49px;
      width: 49px;
      transition: 0.25s;
    }
  </style>
  <body>
    <div id="container">
      <div id="tile1" class="tile"></div>
      <div id="tile2" class="tile">
        <ul id="intake"></ul>
      </div>
      <div id="tile3" class="tile">
        <div class="parent">
          <h1 style="text-align: center">Create a Room</h1>
        </div>
        <form action="/create/room" method="POST" id="form">
          <input
            type="text"
            name="room"
            id="text-input"
            maxlength="10"
            minlength="3"
          />
          <button type="submit">+</button>
        </form>
      </div>
    </div>

    <script>
      let intake = document.getElementById("intake");
      let tiles = document.querySelectorAll(".tile");
      let cursewords;
      let sx = 0,
        sy = 0,
        nx = 0,
        ny = 0;
      console.log(tiles);

      // set tile positions
      window.onload = async (e) => {
        tiles = [...tiles].map((t, index) => {
          t.style.width = `${document.body.clientWidth / tiles.length}px`;
          t.style.height = `50%`;
          t.style.left = `${
            (document.body.clientWidth / tiles.length) * index
          }px`;
        });

        // get exisitng rooms
        // fetch existing
        let existing = await fetch("/room/exisiting")
          .then((r) => r.json())
          .then((d) => d.room);
        if (existing !== "no data") {
          existing.map((ex) => inTake(ex));
        }
      };

      // iterate through tiles
      tiles.forEach((tile, idx) => {
        tile.onmousedown = mouseDown;

        //1) Mousedown
        function mouseDown(e) {
          // starting position becomes current tile position
          sx = e.clientX;
          sy = e.clientY;

          // listen for mousemove & mouseup events when mouse is down
          document.addEventListener("mousemove", mouseMove);
          document.onmouseup = mouseUp;
        }

        // mousemove
        function mouseMove(e) {
          // new x/y positions = starting positions - current tile position
          nx = sx - e.clientX;
          ny = sy - e.clientY;

          // starting position becomes current tile position (again)
          sx = e.clientX;
          sy = e.clientY;

          // tile's left position = tile's left offset - new-x position
          tile.style.left = `${tile.offsetLeft - nx}px`;
          // tile's top position = tile's top offset - new-y position
          tile.style.top = `${tile.offsetTop - ny}px`;
        }

        // mouseup
        function mouseUp(e) {
          // remove mousemove event listener
          document.removeEventListener("mousemove", mouseMove);
        }
      });

      let room_intake = tiles[1];
      // submit function
      let submit = document.querySelector("button[type=submit]");
      submit.onclick = async (e) => {
        // prevent form from firing
        e.preventDefault();

        console.log(
          await checkCurseWords(e.target.parentElement.children[0].value)
        );
        let value =
          (await checkCurseWords(e.target.parentElement.children[0].value)) ==
          false
            ? e.target.parentElement.children[0].value
            : false;
        console.log(value);
        let payload = { room: value };
        // create new room
        await fetch("/create/room", {
          headers: { "Content-Type": "application/json" },
          method: "POST",
          body: JSON.stringify(payload),
        })
          .then((r) => {
            return r.json();
          })
          .then((data) => {
            let rooms = data.room; // array of rooms
            console.log(rooms);
            let target = rooms[rooms.length - 1];
            inTake(target);
            let lis = document.querySelectorAll(".align-li");
            lis.forEach((l, index) => {
              l.onclick = async (e) => {
                let room = l.textContent;
                console.log(room);
                return await fetch("/room/" + room, {
                  method: "GET",
                  headers: {
                    "Content-Type": "application/json",
                  },
                })
                  .then((r) => r.json())
                  .then((data) => console.log(data));
              };
            });
          });
        e.target.parentElement.children[0].value = "";
      };

      // check curse words helper func
      async function checkCurseWords(val) {
        console.log("checking if " + val + " is a curseword...");
        let cursewords = await fetch("/wiki/curse")
          .then((r) => r.json())
          .then((d) => d.words);
        console.log(cursewords);
        if (cursewords == "nothing here") {
          return false;
        } else {
          let bool = [...cursewords].filter((word, idx) => {
            let reg = new RegExp(`^${word}$`, "i");
            console.log(reg);
            return cursewords.includes(val);
          });
          console.log(bool);
          return bool.length > 0;
        }
      }

      // function to append li's to ul
      function inTake(room) {
        let li = document.createElement("li");
        li.classList.add("align-li");
        li.textContent = room;
        intake.appendChild(li);
      }
    </script>
  </body>
</html>
